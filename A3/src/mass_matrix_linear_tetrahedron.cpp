 
 #include <mass_matrix_linear_tetrahedron.h>

 void mass_matrix_linear_tetrahedron(Eigen::Matrix1212d &M, Eigen::Ref<const Eigen::VectorXd> qdot, Eigen::Ref<const Eigen::RowVectorXi> element, double density, double volume) {
     M = Eigen::Matrix1212d::Zero();

     M(0,0) = 1.0 / 6.0E+1;
     M(0,3) = 1.0 / 1.2E+2;
     M(0,6) = 1.0 / 1.2E+2;
     M(0,9) = 1.0 / 1.2E+2;
     M(1,1) = 1.0 / 6.0E+1;
     M(1,4) = 1.0 / 1.2E+2;
     M(1,7) = 1.0 / 1.2E+2;
     M(1,10) = 1.0 / 1.2E+2;
     M(2,2) = 1.0 / 6.0E+1;
     M(2,5) = 1.0 / 1.2E+2;
     M(2,8) = 1.0 / 1.2E+2;
     M(2,11) = 1.0 / 1.2E+2;
     M(3,0) = 1.0 / 1.2E+2;
     M(3,3) = 1.0 / 6.0E+1;
     M(3,6) = 1.0 / 1.2E+2;
     M(3,9) = 1.0 / 1.2E+2;
     M(4,1) = 1.0 / 1.2E+2;
     M(4,4) = 1.0 / 6.0E+1;
     M(4,7) = 1.0 / 1.2E+2;
     M(4,10) = 1.0 / 1.2E+2;
     M(5,2) = 1.0 / 1.2E+2;
     M(5,5) = 1.0 / 6.0E+1;
     M(5,8) = 1.0 / 1.2E+2;
     M(5,11) = 1.0 / 1.2E+2;
     M(6,0) = 1.0 / 1.2E+2;
     M(6,3) = 1.0 / 1.2E+2;
     M(6,6) = 1.0 / 6.0E+1;
     M(6,9) = 1.0 / 1.2E+2;
     M(7,1) = 1.0 / 1.2E+2;
     M(7,4) = 1.0 / 1.2E+2;
     M(7,7) = 1.0 / 6.0E+1;
     M(7,10) = 1.0 / 1.2E+2;
     M(8,2) = 1.0 / 1.2E+2;
     M(8,5) = 1.0 / 1.2E+2;
     M(8,8) = 1.0 / 6.0E+1;
     M(8,11) = 1.0 / 1.2E+2;
     M(9,0) = 1.0 / 1.2E+2;
     M(9,3) = 1.0 / 1.2E+2;
     M(9,6) = 1.0 / 1.2E+2;
     M(9,9) = 1.0 / 6.0E+1;
     M(10,1) = 1.0 / 1.2E+2;
     M(10,4) = 1.0 / 1.2E+2;
     M(10,7) = 1.0 / 1.2E+2;
     M(10,10) = 1.0 / 6.0E+1;
     M(11,2) = 1.0 / 1.2E+2;
     M(11,5) = 1.0 / 1.2E+2;
     M(11,8) = 1.0 / 1.2E+2;
     M(11,11) = 1.0 / 6.0E+1;

     M = 6. * M * density * volume;
 }